/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Coins } from "./Coins";
import { CoinsCountArgs } from "./CoinsCountArgs";
import { CoinsFindManyArgs } from "./CoinsFindManyArgs";
import { CoinsFindUniqueArgs } from "./CoinsFindUniqueArgs";
import { CreateCoinsArgs } from "./CreateCoinsArgs";
import { UpdateCoinsArgs } from "./UpdateCoinsArgs";
import { DeleteCoinsArgs } from "./DeleteCoinsArgs";
import { User } from "../../user/base/User";
import { CoinsService } from "../coins.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Coins)
export class CoinsResolverBase {
  constructor(
    protected readonly service: CoinsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Coins",
    action: "read",
    possession: "any",
  })
  async _coinsItemsMeta(
    @graphql.Args() args: CoinsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Coins])
  @nestAccessControl.UseRoles({
    resource: "Coins",
    action: "read",
    possession: "any",
  })
  async coinsItems(@graphql.Args() args: CoinsFindManyArgs): Promise<Coins[]> {
    return this.service.coinsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Coins, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Coins",
    action: "read",
    possession: "own",
  })
  async coins(
    @graphql.Args() args: CoinsFindUniqueArgs
  ): Promise<Coins | null> {
    const result = await this.service.coins(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Coins)
  @nestAccessControl.UseRoles({
    resource: "Coins",
    action: "create",
    possession: "any",
  })
  async createCoins(@graphql.Args() args: CreateCoinsArgs): Promise<Coins> {
    return await this.service.createCoins({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Coins)
  @nestAccessControl.UseRoles({
    resource: "Coins",
    action: "update",
    possession: "any",
  })
  async updateCoins(
    @graphql.Args() args: UpdateCoinsArgs
  ): Promise<Coins | null> {
    try {
      return await this.service.updateCoins({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Coins)
  @nestAccessControl.UseRoles({
    resource: "Coins",
    action: "delete",
    possession: "any",
  })
  async deleteCoins(
    @graphql.Args() args: DeleteCoinsArgs
  ): Promise<Coins | null> {
    try {
      return await this.service.deleteCoins(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Coins): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
