/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Coins as PrismaCoins,
  User as PrismaUser,
} from "@prisma/client";

export class CoinsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CoinsCountArgs, "select">): Promise<number> {
    return this.prisma.coins.count(args);
  }

  async coinsItems(args: Prisma.CoinsFindManyArgs): Promise<PrismaCoins[]> {
    return this.prisma.coins.findMany(args);
  }
  async coins(args: Prisma.CoinsFindUniqueArgs): Promise<PrismaCoins | null> {
    return this.prisma.coins.findUnique(args);
  }
  async createCoins(args: Prisma.CoinsCreateArgs): Promise<PrismaCoins> {
    return this.prisma.coins.create(args);
  }
  async updateCoins(args: Prisma.CoinsUpdateArgs): Promise<PrismaCoins> {
    return this.prisma.coins.update(args);
  }
  async deleteCoins(args: Prisma.CoinsDeleteArgs): Promise<PrismaCoins> {
    return this.prisma.coins.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.coins
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
